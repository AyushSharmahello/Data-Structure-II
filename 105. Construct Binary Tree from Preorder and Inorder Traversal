/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    HashMap<Integer,Integer> map= new HashMap<>();
    int newPreorder[];
    int index=0;
    
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        newPreorder=preorder;
   
        for(int i=0; i<inorder.length;i++)
        {
            map.put(inorder[i],i);
        }
       return helper(0,preorder.length-1);
        }
   public TreeNode helper(int start,int end )
    {    
        //base case
           if(start>end)
            return null;
       int fetch=newPreorder[index++]; 
              
       TreeNode root= new TreeNode(fetch) ;
        int idx =map.get(fetch); // we want idx corresponding to root eg 3 in Inoder has idx 1 
         root.left=helper(start,idx-1);
          root.right=helper(idx+1,end);
         return root;
    }
}
