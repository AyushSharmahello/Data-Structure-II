/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {   
    public static int i;

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
         if (root == null) {
            return "N";
        }
        return root.val + "," + serialize(root.left) +","+ serialize(root.right);
    }


    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
       if (data == null || data.length() == 0) return null;
        String[] vals = data.split(",");
        i = 0;
        TreeNode root = preOrder(vals);
        return root;
    }

    public TreeNode preOrder(String[] vals){
        if (vals[i].equals("N")) {
            i++;
            return null;
        } else {
            TreeNode root = new TreeNode(Integer.parseInt(vals[i]));
            i++;
            root.left = preOrder(vals);
            root.right = preOrder(vals);
            return root;
        }
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
